==================================================
=== REPORTE DE ANÁLISIS DE CÓDIGO ===
Proyecto: auditoria-redhat
Ruta: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat
Generado el: Thu Jun 12 10:01:05 -03 2025
==================================================

--- INFORMACIÓN DEL REPOSITORIO GIT ---
Rama actual: main
Último commit: da79d66 - Revert "Version simplificada" (andreiveisuade, 4 minutes ago)
---

--- ESTRUCTURA DEL DIRECTORIO ---
.
├── auditoria_fase1.sh
├── auditoria_fase2.sh
├── consigna.md
├── dar_permisos.sh
├── guia_de_ejecucion.md
└── scripts
    ├── fase1
    │   └── 01_escanear.sh
    └── fase2
        ├── 01_auditar_inicial_bd.sh
        ├── 02_configurar_firewall.sh
        └── 03_ajustar_permisos.sh

4 directories, 9 files
---



==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/auditoria_fase1.sh 

#!/bin/bash
# Usamos bash como intérprete del script

set -u
# Hace que el script termine si se usa una variable no definida (mejor para evitar errores silenciosos)

MAQUINA_TARGET="$1"


LOG_DIR="./logs_auditoria"
# Directorio donde se guardarán los archivos de log

mkdir -p "$LOG_DIR"
FECHA=$(date +"%Y%m%d_%H%M%S")
MAQUINA_ACTUAL=$(hostname)
LOG="${LOG_DIR}/auditoria_Fase1_${MAQUINA_ACTUAL}_to_${MAQUINA_TARGET}_${FECHA}.txt"

# Inicio de auditoría
echo "INICIO DE AUDITORÍA (Fase 1 - Escaneo Remoto): $(date '+%Y-%m-%d %H:%M:%S %Z')" > "$LOG"
echo "Ejecutada desde: $MAQUINA_ACTUAL" >> "$LOG"
echo "Servidor de Base de Datos Objetivo: $MAQUINA_TARGET" >> "$LOG"
echo "----------------------------------------------------------" >> "$LOG"
echo "" >> "$LOG"

SCRIPTS_DIR_FASE1="./scripts/fase1"
# Carpeta donde se encuentran los scripts de la fase 1 de auditoría

SCRIPT_ESCANEAR="${SCRIPTS_DIR_FASE1}/01_escanear.sh"
# Ruta completa al script de escaneo remoto

# Verificar si el script de escaneo existe
if [ ! -f "$SCRIPT_ESCANEAR" ]; then
    echo "ERROR: No se encontró el script de escaneo de Fase 1: '$SCRIPT_ESCANEAR'" | tee -a "$LOG" >&2
    echo "FIN DE AUDITORÍA (Fase 1) con error." | tee -a "$LOG" >&2
    exit 1
fi


echo "== Ejecutando $(basename "$SCRIPT_ESCANEAR") para $MAQUINA_TARGET ==" | tee -a "$LOG"
# Imprime y registra en el log qué script se está ejecutando y para qué máquina

# Ejecuta el script de escaneo y guarda toda su salida (stdout + stderr) en el log
# tee -a aquí para que la salida también se muestre en la consola
if bash "$SCRIPT_ESCANEAR" "$MAQUINA_TARGET" | tee -a "$LOG"; then
    echo "$(basename "$SCRIPT_ESCANEAR") finalizado con éxito." | tee -a "$LOG"
    exit 0
else
    echo "$(basename "$SCRIPT_ESCANEAR") finalizó con errores. Revisar log." | tee -a "$LOG" >&2
    exit 1
fi


echo "" >> "$LOG"
echo "----------------------------------------------------------" >> "$LOG"
echo -e "FIN DE AUDITORÍA (Fase 1): $(date '+%Y-%m-%d %H:%M:%S %Z')\nLog de Fase 1 guardado en: $LOG\nAuditoría Fase 1 completada. Ver resultados en: $LOG" | tee -a "$LOG"

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/auditoria_fase2.sh 

#!/bin/bash
# Script a ejecutar en WORKSTATION para ejecutar scripts de endurecimiento en un SERVIDOR REMOTO (BD)
set -u

USER="$1"
TARGET="$2"
FECHA=$(date +"%Y%m%d_%H%M%S")
HOST=$(hostname)
LOG_DIR="./logs_auditoria"
mkdir -p "$LOG_DIR"
LOG="${LOG_DIR}/fase2_${HOST}_to_${TARGET}_${FECHA}.log"

SCRIPTS=(01_auditar_inicial_bd.sh 02_configurar_firewall.sh 03_ajustar_permisos.sh)

for script in "${SCRIPTS[@]}"; do
  PATH_LOCAL="./scripts/fase2/$script"
  [[ -f "$PATH_LOCAL" ]] || { echo "No existe $PATH_LOCAL"; continue; }

  echo "[+] Ejecutando $script en $TARGET" | tee -a "$LOG"
  ssh -t "$USER@$TARGET" "sudo bash -s" < "$PATH_LOCAL" >> "$LOG" 2>&1 \
    && echo "[OK] $script" | tee -a "$LOG" \
    || echo "[ERROR] $script" | tee -a "$LOG"
done

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/consigna.md 

# Unidad 6 - Trabajo Práctico

## “Fortalecimiento del Servidor de Producción: Auditoría y Endurecimiento”

### Planteamiento del Problema

Una pequeña empresa ha desplegado recientemente dos servidores basados en Red Hat: uno para aplicaciones web y otro para base de datos. Ante la inminente conexión con el entorno público, el responsable de sistemas recibe la orden de realizar una auditoría de seguridad básica y aplicar medidas de endurecimiento del sistema operativo.

### Se requiere:

1. Escanear el servidor de base de datos desde el servidor de aplicaciones para identificar puertos abiertos.
2. Limitar los servicios activos y aplicar reglas de firewall estrictas.
3. Revisar y ajustar permisos de archivos y directorios sensibles.

El objetivo es registrar todas las acciones en un archivo de log y automatizar parte del proceso con bash.

### Objetivos de Seguridad Cubiertos

- Mínima superficie de ataque (puertos/servicios).
- Integridad del sistema de archivos y configuraciones.

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/dar_permisos.sh 

#!/bin/bash

chmod +x auditoria_fase1.sh
chmod +x auditoria_fase2.sh
chmod +x scripts/fase1/*.sh
chmod +x scripts/fase2/*.sh

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/guia_de_ejecucion.md 

# Guía de Ejecución Unidad 6 - Auditoría y Endurecimiento

### Escenario

* **workstation**: Servidor de aplicaciones. Ejecuta el escaneo remoto.
* **utility**: Servidor de base de datos. Es el objetivo del escaneo y endurecimiento.

---

### Paso 1: Iniciar los servidores necesarios

Desde el panel de Red Hat levantar y hacer **Open Console** de:

- `workstation`
- `utility`

---

### Paso 2: Acceder a la consola de `workstation`

1. Clic en **Open Console** de `workstation`.
2. Iniciar sesión como `student` (o el usuario asignado).

---

### Paso 2.1: Verificaciones previas

1. Instalar `nmap` con:

```bash
sudo dnf install nmap
```

2. Verificar que `nmap` esta instalado con:

```bash
nmap --version
```

3. Hacer un `ip route` para verificar la ruta de red

### Paso 3 Verificar conectividad con `utility`

```bash
ping 5 utility
```

Debe responder con paquetes recibidos.


### Paso 4 Dar permisos de ejecución

```bash
chmod +x auditoria_fase1.sh
chmod +x auditoria_fase2.sh
chmod +x scripts/01_escanear.sh
chmod +x scripts/02_configurar_firewall.sh
chmod +x scripts/03_ajustar_permisos.sh
```

### Escaner la red con nmap

```bash
nmap -sn 172.25.250.0/24
nmap -sn 172.25.250.0/24 | grep "utility" | awk -F '[()]' '{print $2}'
```

El argumento -sn significa hacer un "ping" a la red, es decir que no hará escaneo de puertos, solo hará un escaneo de red para ver si hay dispositivos conectados.

La notación 172.25.250.0/24 define una red con máscara de 24 bits (255.255.255.0), lo cual significa que abarca las IPs desde 172.25.250.0 hasta 172.25.250.255.
Sin embargo, las direcciones .0 (red) y .255 (broadcast) no pueden asignarse a dispositivos. Por lo tanto, los hosts válidos están entre 172.25.250.1 y 172.25.250.254.


### Paso 5 Ejecutar Fase 1 - Escaneo remoto

Desde `workstation`, ejecutar:

```bash
bash ./auditoria_fase1.sh utility
```

Esto realizará el escaneo remoto y generará un reporte en `workstation` en la carpeta `reportes`.

### Paso 6 Verificar acceso SSH a `utility`

```bash
ssh student@utility
```

Debe responder con la contraseña del usuario `student`.

### Paso 7 Ejecutar Fase 2 - Endurecimiento

Desde `workstation`, ejecutar:

```bash
bash ./auditoria_fase2.sh utility
```

Esto realizará el endurecimiento remoto y generará un reporte en `workstation` en la carpeta `reportes`.



xrandr --output $(xrandr | grep " connected" | awk '{ print $1 }') --mode 1920x1080 ; gsettings set org.gnome.desktop.interface text-scaling-factor 1.5


git clone https://github.com/andreiveisuade/TPO-Sistemas_Operativos.git

nmap -sn 172.25.250.0/24

nmap -sn 172.25.250.0/24 | grep "utility" | awk -F '[()]' '{print $2}'

./auditoria_fase1.sh $(nmap -sn 172.25.250.0/24 | grep "utility" | awk -F '[()]' '{print $2}')

set relativenumber # Habilita el número relativo de las líneas en vim

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/scripts/fase1/01_escanear.sh 

#!/bin/bash
# Script para realizar un escaneo de seguridad REMOTA del servidor objetivo.
# Realiza un análisis de puertos abiertos y servicios en ejecución en un servidor remoto.
#
# Requisitos:
# El comando nmap debe estar instalado previamente en el sistema

set -u
# Hace que el script termine si se usa una variable no definida

# --- Configuración inicial ---
MAQUINA_TARGET="$1"  # IP o hostname del servidor objetivo

# Verificar que se recibió un argumento (aunque el script principal ya lo hace, buena práctica)
if [ -z "$MAQUINA_TARGET" ]; then
    echo "ERROR: No se recibió el argumento de máquina objetivo en el script de escaneo." >&2
    exit 1
fi

FECHA_ESCANEO=$(date +"%Y%m%d_%H%M%S")
MAQUINA_EJECUTORA=$(hostname)

# Verificar que nmap esté instalado
if ! command -v nmap &> /dev/null; then
    echo "ERROR: nmap no está instalado. Por favor instálalo manualmente." >&2
    exit 1
fi

echo "=== INICIANDO ESCANEO REMOTO DE SEGURIDAD ==="
echo "Objetivo de Escaneo: $MAQUINA_TARGET"
echo "Ejecutado desde: $MAQUINA_EJECUTORA"
echo "Fecha: $(date '+%Y-%m-%d %H:%M:%S %Z')"
echo "---------------------------------------------"

# --- Verificación de conectividad ---
echo -e "\n[+] Verificando conectividad con $MAQUINA_TARGET..."
# Usamos ping con 1 paquete (-c 1) y timeout de 1 segundo (-W 1)
if ping -c 1 -W 1 "$MAQUINA_TARGET" &> /dev/null; then
    echo "  Conectividad OK."
else
    echo "ERROR: No se puede alcanzar la máquina objetivo '$MAQUINA_TARGET'." >&2
    echo "Verifica la IP/hostname y la conectividad de red." >&2
    exit 1 # Salir si no hay conectividad
fi
echo "---------------------------------------------"


# --- Escaneo rápido de puertos ---
# Realiza un escaneo rápido de los 100 puertos TCP más comunes en el objetivo.
#   -F: Escaneo rápido (Fast) - Escanea solo los 100 puertos más comunes
echo -e "\n[+] Iniciando escaneo rápido de puertos TCP más comunes (-F)..."
# Capturamos el estado de salida de nmap
if ! nmap -F "$MAQUINA_TARGET"; then
    echo "ERROR: Falló el escaneo rápido de puertos." >&2
    # No salimos aquí, intentamos el siguiente escaneo si es posible
fi

# --- Escaneo detallado de servicios ---
# Realiza un escaneo más exhaustivo para detectar versiones de servicios en puertos abiertos.
#   -sV: Detección de versiones - Determina la versión de los servicios encontrados. De esta manera se puede identificar el tipo de servicio y su versión para actualizarlos y evitar vulnerabilidades.
#   Este escaneo es más lento pero proporciona información valiosa sobre los servicios

echo -e "\n[+] Detectando servicios y versiones en puertos abiertos (-sV)..."
if ! nmap -sV "$MAQUINA_TARGET"; then
    echo "ERROR: Falló la detección de servicios." >&2
    # No salimos aquí, permitimos que finalice el script
fi

echo -e "\n[+] Auditoría de red remota (escaneo de $MAQUINA_TARGET) finalizada."

# El script de escaneo finaliza siempre con éxito (exit 0) a menos que falle la conectividad
# o nmap no esté instalado. Los fallos de los escaneos individuales se reportan como ERROR
# pero no detienen el script a menos que sea un fallo fundamental.
exit 0

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/scripts/fase2/01_auditar_inicial_bd.sh 

#!/bin/bash
# Script a ejecutar en el SERVIDOR DE BASE DE DATOS
# Este script realiza una auditoría inicial de servicios y conexiones LOCALES.
# Se ejecuta como root mediante "sudo bash -s" desde auditoria_fase2.sh.
set -u
set -e

echo "=== AUDITORÍA INICIAL DE SERVICIOS Y CONEXIONES (en $(hostname)) ==="
echo "INFO: Ejecutando con privilegios de root."
echo "Fecha: $(date '+%Y-%m-%d %H:%M:%S %Z')"
echo "------------------------------------------------------------------"

echo -e "\n[+] Servicios habilitados para iniciar al arranque (systemctl --state=enabled):"
systemctl list-unit-files --type=service --state=enabled --no-pager | awk '{print "  " $1, $2}' | grep -vE '^UNIT|^$'
echo "---"

echo -e "\n[+] Servicios actualmente EJECUTÁNDOSE (systemctl --state=running):"
systemctl list-units --type=service --state=running --no-pager | awk '{print "  " $1}' | grep -vE '^UNIT|^$'
echo "---"

echo -e "\n[+] Conexiones de red activas (ESTABLISHED) con detalles de proceso (ss -tulnp):"
# ss es el reemplazo moderno de netstat. -tulnp: TCP/UDP, listening, established, process, numeric
ss -tulnp | grep 'ESTAB'
echo "---"

echo -e "\n[+] Puertos escuchando (LISTEN) en esta máquina (ss -tulnp):"
ss -tulnp | grep 'LISTEN'
echo "---"

echo "✅ Auditoría inicial de servicios y conexiones completada ✅"

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/scripts/fase2/02_configurar_firewall.sh 

#!/bin/bash
# Script para configurar el firewall en el SERVIDOR DE BASE DE DATOS
# ESTE SCRIPT SE EJECUTA COMO ROOT MEDIANTE "sudo bash -s" DESDE EL SCRIPT auditoria_fase2.sh
set -u
set -e

PUERTOS_BD_ABIERTOS=("3306/tcp")
SERVICIOS_A_REMOVER=("http" "https" "ftp" "telnet" "samba")

[[ -x "$(command -v firewall-cmd)" ]] || { echo "No está firewalld"; exit 1; }
systemctl enable --now firewalld

ZONA=$(firewall-cmd --get-default-zone)
echo "[*] Configurando zona: $ZONA"

for s in "${SERVICIOS_A_REMOVER[@]}"; do
  firewall-cmd --permanent --zone="$ZONA" --remove-service="$s" 2>/dev/null || true
done

firewall-cmd --permanent --zone="$ZONA" --add-service=ssh

for p in "${PUERTOS_BD_ABIERTOS[@]}"; do
  firewall-cmd --permanent --zone="$ZONA" --add-port="$p"
done

firewall-cmd --reload
firewall-cmd --zone="$ZONA" --list-all

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/scripts/fase2/03_ajustar_permisos.sh 

#!/bin/bash
set -eu

ARCHIVOS=(
  "/etc/shadow:600"
  "/etc/gshadow:600"
  "/etc/passwd:644"
  "/etc/group:644"
  "/root:700"
  "/var/lib/mysql:700"
  "/etc/my.cnf:600"
)

for item in "${ARCHIVOS[@]}"; do
  path="${item%%:*}"
  perm="${item##*:}"
  [[ -e "$path" ]] || { echo "No existe $path"; continue; }

  actual=$(stat -c "%a" "$path")
  if [ "$actual" != "$perm" ]; then
    chmod "$perm" "$path" && echo "✔ $path → $perm"
  else
    echo "✓ $path ya tiene permisos correctos"
  fi
done
==================================================
=== FIN DEL REPORTE ===
==================================================
