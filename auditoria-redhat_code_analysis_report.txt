==================================================
=== REPORTE DE ANÁLISIS DE CÓDIGO ===
Proyecto: auditoria-redhat
Ruta: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat
Generado el: Thu Jun 12 12:21:14 -03 2025
==================================================

--- INFORMACIÓN DEL REPOSITORIO GIT ---
Rama actual: main
Último commit: 25e57c1 - Version FINAL SIMPLIFICADA_V2_ ajustando Fase 2_1 (andreiveisuade, 11 minutes ago)
---

--- ESTRUCTURA DEL DIRECTORIO ---
.
├── auditoria_fase1.sh
├── auditoria_fase2.sh
├── consigna.md
├── dar_permisos.sh
├── guia_de_ejecucion.md
└── scripts
    ├── fase1
    │   └── 01_escanear.sh
    └── fase2
        ├── 01_auditar_inicial_bd.sh
        ├── 02_configurar_firewall.sh
        └── 03_ajustar_permisos.sh

4 directories, 9 files
---



==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/auditoria_fase1.sh 

#!/bin/bash

# Argumento: IP o hostname de la máquina a auditar
MAQUINA_TARGET="$1"

# Carpeta y archivo de log
LOG_DIR="./logs_auditoria"
mkdir -p "$LOG_DIR"
FECHA=$(date +"%Y%m%d_%H%M%S")
LOG="$LOG_DIR/auditoria_Fase1_$(hostname)_to_${MAQUINA_TARGET}_$FECHA.txt"

echo "[+] Iniciando auditoria_fase1.sh" | tee -a "$LOG"

# Ejecuta el script de escaneo y guarda salida en el log
bash ./scripts/fase1/01_escanear.sh "$MAQUINA_TARGET" | tee -a "$LOG"

echo "[+] Fin auditoria_fase1.sh" | tee -a "$LOG"

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/auditoria_fase2.sh 

#!/bin/bash

# Este script debe ejecutarse desde el servidor workstation
# Su objetivo es ejecutar los scripts de endurecimiento (Fase 2) de forma remota en el servidor de base de datos

# Argumentos esperados:
# $1 = usuario remoto (por ejemplo: student)
# $2 = nombre o IP del servidor objetivo (por ejemplo: utility)
USER="$1"
TARGET="$2"

# Se crea una carpeta para guardar los logs si no existe
LOG_DIR="./logs_auditoria"
mkdir -p "$LOG_DIR"

# Se genera un nombre de archivo de log con la fecha actual
FECHA=$(date +"%Y%m%d_%H%M%S")
LOG="$LOG_DIR/fase2_$(hostname)_to_${TARGET}_$FECHA.log"

# Encabezado del log para dejar bien marcado el inicio de la auditoría
{
  echo "=================================================="
  echo "=== AUDITORÍA FASE 2: Endurecimiento del sistema ==="
  echo "Target: $TARGET"
  echo "Usuario: $USER"
  echo "Fecha de ejecución: $(date '+%Y-%m-%d %H:%M:%S %Z')"
  echo "=================================================="
  echo ""
} | tee -a "$LOG"

# Se registra el inicio de la auditoría en el log y en pantalla
echo "[+] Iniciando auditoria_fase2.sh" | tee -a "$LOG"
echo "--------------------------------------------------" | tee -a "$LOG"

# Se define la lista de scripts a ejecutar en el servidor remoto
for s in 01_auditar_inicial_bd.sh 02_configurar_firewall.sh 03_ajustar_permisos.sh; do
  # Se informa qué script se va a ejecutar
  echo -e "\n[+] Ejecutando script: $s" | tee -a "$LOG"
  echo "--------------------------------------------------" | tee -a "$LOG"

  # 1. Se copia el script al servidor remoto (en /tmp)
  scp "./scripts/fase2/$s" "$USER@$TARGET:/tmp/$s" > /dev/null

  # 2. Se ejecuta el script de forma remota con sudo
  #    sudo podrá pedir la contraseña porque la sesión es interactiva
  # 3. Después de ejecutarlo, se elimina el script para limpiar el entorno
  ssh -t "$USER@$TARGET" "sudo bash /tmp/$s && rm /tmp/$s" | tee -a "$LOG"
done

# Se registra el fin de la auditoría
echo -e "\n[+] Fin auditoria_fase2.sh" | tee -a "$LOG"
echo "==================================================" | tee -a "$LOG"
echo "Log completo guardado en: $LOG" | tee -a "$LOG"

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/consigna.md 

# Unidad 6 - Trabajo Práctico

## “Fortalecimiento del Servidor de Producción: Auditoría y Endurecimiento”

### Planteamiento del Problema

Una pequeña empresa ha desplegado recientemente dos servidores basados en Red Hat: uno para aplicaciones web y otro para base de datos. Ante la inminente conexión con el entorno público, el responsable de sistemas recibe la orden de realizar una auditoría de seguridad básica y aplicar medidas de endurecimiento del sistema operativo.

### Se requiere:

1. Escanear el servidor de base de datos desde el servidor de aplicaciones para identificar puertos abiertos.
2. Limitar los servicios activos y aplicar reglas de firewall estrictas.
3. Revisar y ajustar permisos de archivos y directorios sensibles.

El objetivo es registrar todas las acciones en un archivo de log y automatizar parte del proceso con bash.

### Objetivos de Seguridad Cubiertos

- Mínima superficie de ataque (puertos/servicios).
- Integridad del sistema de archivos y configuraciones.

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/dar_permisos.sh 

#!/bin/bash

chmod +x auditoria_fase1.sh
chmod +x auditoria_fase2.sh
chmod +x scripts/fase1/*.sh
chmod +x scripts/fase2/*.sh

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/guia_de_ejecucion.md 

# Guía de Ejecución Unidad 6 - Auditoría y Endurecimiento

### Escenario

* **workstation**: Servidor de aplicaciones. Ejecuta el escaneo remoto.
* **utility**: Servidor de base de datos. Es el objetivo del escaneo y endurecimiento.

---

### Paso 1: Iniciar los servidores necesarios

Desde el panel de Red Hat levantar y hacer **Open Console** de:

- `workstation`
- `utility`

---

### Paso 2: Acceder a la consola de `workstation`

1. Clic en **Open Console** de `workstation`.
2. Iniciar sesión como `student` (o el usuario asignado).

---

### Paso 2.1: Verificaciones previas

1. Instalar `nmap` con:

```bash
sudo dnf install nmap
```

2. Verificar que `nmap` esta instalado con:

```bash
nmap --version
```

3. Hacer un `ip route` para verificar la ruta de red

### Paso 3 Verificar conectividad con `utility`

```bash
ping 5 utility
```

Debe responder con paquetes recibidos.


### Paso 4 Dar permisos de ejecución

```bash
chmod +x auditoria_fase1.sh
chmod +x auditoria_fase2.sh
chmod +x scripts/01_escanear.sh
chmod +x scripts/02_configurar_firewall.sh
chmod +x scripts/03_ajustar_permisos.sh
```

### Escaner la red con nmap

```bash
nmap -sn 172.25.250.0/24
nmap -sn 172.25.250.0/24 | grep "utility" | awk -F '[()]' '{print $2}'
```

El argumento -sn significa hacer un "ping" a la red, es decir que no hará escaneo de puertos, solo hará un escaneo de red para ver si hay dispositivos conectados.

La notación 172.25.250.0/24 define una red con máscara de 24 bits (255.255.255.0), lo cual significa que abarca las IPs desde 172.25.250.0 hasta 172.25.250.255.
Sin embargo, las direcciones .0 (red) y .255 (broadcast) no pueden asignarse a dispositivos. Por lo tanto, los hosts válidos están entre 172.25.250.1 y 172.25.250.254.


El resultado de esto se guarda en el log

## Fase 2

### Paso 5 - Comprobar la conexion SSH con `utility`

```bash
ssh student@utility
```

Debe responder con la contraseña del usuario `student`.

### Paso 6 - Ejecutar Fase 2 - Endurecimiento

Desde `workstation`, ejecutar:

```bash
./auditoria_fase2.sh student utility
```

Esto realizará el endurecimiento remoto y generará un reporte en `workstation` en la carpeta `reportes`.

### Paso 7 - Comprobar que los puertos se hayan cerrado

```bash
nmap utility
```

Debe responder con puertos cerrados.

o si no con:

```bash
./auditoria_fase1.sh utility
```




xrandr --output $(xrandr | grep " connected" | awk '{ print $1 }') --mode 1920x1080 ; gsettings set org.gnome.desktop.interface text-scaling-factor 1.5


git clone https://github.com/andreiveisuade/TPO-Sistemas_Operativos.git

nmap -sn 172.25.250.0/24

nmap -sn 172.25.250.0/24 | grep "utility" | awk -F '[()]' '{print $2}'

./auditoria_fase1.sh $(nmap -sn 172.25.250.0/24 | grep "utility" | awk -F '[()]' '{print $2}')

set relativenumber # Habilita el número relativo de las líneas en vim

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/scripts/fase1/01_escanear.sh 

#!/bin/bash

# Escanea puertos abiertos y versiones de servicios en una máquina remota
MAQUINA_TARGET="$1"

echo "[+] Escaneo rápido de puertos (-F)"
nmap -F "$MAQUINA_TARGET"

echo "[+] Detección de versiones de servicios (-sV)"
nmap -sV "$MAQUINA_TARGET"

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/scripts/fase2/01_auditar_inicial_bd.sh 

#!/bin/bash

# Muestra información básica sobre servicios y conexiones locales

echo "========== AUDITORÍA DE SERVICIOS Y CONEXIONES =========="
echo "Hostname: $(hostname)"
echo "Fecha: $(date '+%Y-%m-%d %H:%M:%S %Z')"

echo -e "\n[+] Servicios habilitados al arranque"
systemctl list-unit-files --type=service --state=enabled

echo -e "\n[+] Servicios en ejecución"
systemctl list-units --type=service --state=running

echo -e "\n[+] Conexiones activas (ESTABLISHED)"
ss -tulnp | grep ESTAB

echo -e "\n[+] Puertos escuchando (LISTEN)"
ss -tulnp | grep LISTEN

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/scripts/fase2/02_configurar_firewall.sh 

#!/bin/bash

# Activa el firewall y aplica una política estricta: solo lo esencial.

echo "========== CONFIGURACIÓN DE FIREWALL =========="
echo "Hostname: $(hostname)"
echo "Fecha: $(date '+%Y-%m-%d %H:%M:%S %Z')"

# Asegura que firewalld esté activo, pero no da error si ya lo estaba.
systemctl enable --now firewalld > /dev/null 2>&1

# Eliminar servicios innecesarios

# Basado en el hallazgo de Fase 1, cerramos explícitamente http/https.
firewall-cmd --permanent --remove-service=http > /dev/null 2>&1
firewall-cmd --permanent --remove-service=https > /dev/null 2>&1

# Añadir solo los servicios/puertos requeridos
firewall-cmd --permanent --add-service=ssh
firewall-cmd --permanent --add-port=3306/tcp

# Recargar para aplicar todos los cambios
firewall-cmd --reload

# Mostrar configuración final
firewall-cmd --list-all

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/scripts/fase2/03_ajustar_permisos.sh 

#!/bin/bash

# Ajusta permisos de archivos y directorios críticos.

echo "========== AJUSTE DE PERMISOS =========="
echo "Hostname: $(hostname)"
echo "Fecha: $(date '+%Y-%m-%d %H:%M:%S %Z')"

# Permisos para archivos de contraseñas y configuración de BD
chmod 600 /etc/shadow /etc/gshadow /etc/my.cnf

# Permisos para archivos de usuarios/grupos
chmod 644 /etc/passwd /etc/group

# Permisos para directorios sensibles (root y datos de BD)
chmod 700 /root /var/lib/mysql
==================================================
=== FIN DEL REPORTE ===
==================================================
