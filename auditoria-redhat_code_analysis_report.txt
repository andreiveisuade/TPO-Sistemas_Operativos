==================================================
=== REPORTE DE ANÁLISIS DE CÓDIGO ===
Proyecto: auditoria-redhat
Ruta: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat
Generado el: Thu Jun  5 13:48:46 -03 2025
==================================================

--- INFORMACIÓN DEL REPOSITORIO GIT ---
Rama actual: main
Último commit: af21a54 - Organizacion el codigo en dos Fases (andreiveisuade, 2 hours ago)
---

--- ESTRUCTURA DEL DIRECTORIO ---
.
├── auditoria_fase1.sh
├── auditoria_fase2.sh
├── consigna.md
├── guia_de_ejecucion.md
├── scripts
│   ├── 01_escanear.sh
│   ├── 02_configurar_firewall.sh
│   └── 03_ajustar_permisos.sh
└── utilidades.sh

2 directories, 8 files
---



==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/auditoria_fase1.sh 

#!/bin/bash
# Establece el intérprete de comandos a usar (bash)

# Configuración de opciones del shell:
# -u: Genera un error al usar variables no definidas
set -u

# ===== FUNCIONES AUXILIARES =====
mostrar_ayuda() {
    echo "Uso: $0 <ip_servidor>"
    echo "Ejemplo: $0 192.168.1.100"
    echo "\nArgumentos:"
    echo "  <ip_servidor>  Dirección IP del servidor a auditar (requerido)"
    exit 1
}

# Validar parámetros
if [ $# -ne 1 ]; then
    echo "Error: Se requiere la dirección IP del servidor como parámetro"
    mostrar_ayuda
fi

# Validar formato de IP (solo verifica que tenga el formato básico)
if [[ ! $1 =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    echo "Error: El formato de la IP no es válido"
    mostrar_ayuda
fi

# Asignar IP del parámetro
IP_SERVIDOR_BD="$1"

# ===== CONFIGURACIÓN INICIAL =====
# Directorio donde se guardarán los logs
LOG_DIR="./logs_auditoria"
# Crear el directorio de logs si no existe
# -p: Crea directorios padres si no existen
mkdir -p "$LOG_DIR"

# Generar nombre de archivo de log con marca de tiempo
# Formato: auditoria_<nombre_host>_<AAAAMMDD_HHMMSS>.txt
FECHA=$(date +"%Y%m%d_%H%M%S")
LOG="${LOG_DIR}/auditoria_$(hostname)_${FECHA}.txt"

# Iniciar el archivo de log con información de la auditoría
echo "INICIO DE AUDITORÍA: $(date)" > "$LOG"
echo "Servidor objetivo: $IP_SERVIDOR_BD" >> "$LOG"
echo "" >> "$LOG"

# ===== EJECUCIÓN DE SCRIPTS DE AUDITORÍA =====
# Verificar si existe el directorio de scripts
if [ ! -d "scripts" ]; then
    echo "Error: No se encontró el directorio 'scripts'" | tee -a "$LOG"
    exit 1
fi

# Contador de scripts ejecutados
CONTADOR=0

# Itera sobre todos los scripts en el directorio scripts/ que sigan el patrón ??_*.sh
# Los scripts se ejecutan en orden numérico (01_*.sh, 02_*.sh, etc.)
for script in scripts/??_*.sh; do
    # Verificar si el archivo existe (en caso de que no haya scripts)
    [ -f "$script" ] || continue
    
    # Incrementar contador
    ((CONTADOR++))
    
    # Mostrar en consola y guardar en log el script que se está ejecutando
    echo "== Ejecutando $script ==" | tee -a "$LOG"
    
    # Verificar si es el script de escaneo (que necesita la IP como parámetro)
    if [[ "$(basename "$script")" == "01_escanear.sh" ]]; then
        # Ejecutar script de escaneo con la IP como parámetro
        # >> "$LOG" 2>&1: Redirige tanto la salida estándar como la de error al archivo de log
        bash "$script" "$IP_SERVIDOR_BD" >> "$LOG" 2>&1
    else
        # Ejecutar otros scripts sin parámetros adicionales
        bash "$script" >> "$LOG" 2>&1
    fi

    # Verificar el código de salida del script ejecutado
    # $? contiene el código de salida del último comando ejecutado
    # -ne 0: Verifica si el comando falló (código distinto de cero)
    if [ $? -ne 0 ]; then
        # Mostrar error si el script falló
        echo "ERROR al ejecutar $script" | tee -a "$LOG"
    else
        # Confirmar que el script se ejecutó correctamente
        echo "$script completado" | tee -a "$LOG"
    fi
    
    # Agregar línea en blanco para mejor legibilidad en el log
    echo "" >> "$LOG"
done

# Verificar si se ejecutó al menos un script
if [ $CONTADOR -eq 0 ]; then
    echo "Advertencia: No se encontraron scripts para ejecutar en el directorio 'scripts/'" | tee -a "$LOG"
fi

# ===== FINALIZACIÓN =====
# Registrar hora de finalización y ubicación del log
echo "FIN DE AUDITORÍA: $(date)" >> "$LOG"
echo "Log guardado en: $LOG"
# Mostrar ubicación del log en la consola
echo "Auditoría completada. Ver resultados en: $LOG"

exit 0

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/auditoria_fase2.sh 

cat << 'EOF' > auditoria_fase2.sh
#!/bin/bash
set -u

if [ $# -ne 2 ]; then
    echo "Uso: $0 <usuario> <ip_servidor>"
    exit 1
fi

USUARIO="$1"
IP="$2"

echo "== Conectando a $IP como $USUARIO para ejecutar endurecimiento... =="

# Ejecutar scripts remotos por SSH
echo "-- Ejecutando configuración de firewall --"
ssh "$USUARIO@$IP" 'bash -s' < scripts/02_configurar_firewall.sh

echo "-- Ajustando permisos críticos --"
ssh "$USUARIO@$IP" 'bash -s' < scripts/03_ajustar_permisos.sh

echo "✅ Fase 2 finalizada."
EOF

chmod +x auditoria_fase2.sh

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/consigna.md 

# Unidad 6 - Trabajo Práctico

## “Fortalecimiento del Servidor de Producción: Auditoría y Endurecimiento”

### Planteamiento del Problema

Una pequeña empresa ha desplegado recientemente dos servidores basados en Red Hat: uno para aplicaciones web y otro para base de datos. Ante la inminente conexión con el entorno público, el responsable de sistemas recibe la orden de realizar una auditoría de seguridad básica y aplicar medidas de endurecimiento del sistema operativo.

### Se requiere:

1. Escanear el servidor de base de datos desde el servidor de aplicaciones para identificar puertos abiertos.
2. Limitar los servicios activos y aplicar reglas de firewall estrictas.
3. Revisar y ajustar permisos de archivos y directorios sensibles.

El objetivo es registrar todas las acciones en un archivo de log y automatizar parte del proceso con bash.

### Objetivos de Seguridad Cubiertos

- Mínima superficie de ataque (puertos/servicios).
- Integridad del sistema de archivos y configuraciones.

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/guia_de_ejecucion.md 

# Guía de Ejecución Unidad 6 - Auditoría y Endurecimiento

### Escenario

* **servera**: Servidor de aplicaciones. Ejecuta el escaneo remoto.
* **serverb**: Servidor de base de datos. Es el objetivo del escaneo y endurecimiento.

---

### Paso 1: Iniciar los servidores necesarios

Desde el panel de Red Hat levantar y **Open Console**:
  * `workstation`
  * `utility`

---

### Paso 2: Acceder a la consola de `workstation`

1. Clic en **Open Console** de `workstation`.
2. Iniciar sesión como `student` (o el usuario asignado).

---

### Paso 2.1: Verificacion

1. Instalar nmap con `sudo dnf install nmap`
2. Verificar que nmap esta instalado con `nmap --version`
3. Hacer un ip route para verificar la ruta de red 


### Paso 3: Verificar conectividad con `utility`

Desde `workstation`, ejecutar:

```bash
ping 5 utility
```

Debe responder con paquetes recibidos.

---

### Paso 4.0: Dar permiso de Ejecución

Desde `workstation`, ejecutar:

```bash
chmod +x auditoria_fase1.sh
chmod +x auditoria_fase2.sh
chmod +x scripts/01_escanear.sh
chmod +x scripts/02_configurar_firewall.sh
chmod +x scripts/03_ajustar_permisos.sh
```

### Paso 4: Ejecutar Fase 1 - Escaneo remoto

En `workstation`, ejecutar:

```bash
bash auditoria_fase1.sh utility
```

* Corre el escaneo remoto sobre `utility`
* Genera un log en `logs_auditoria/`

---

### Paso 5: Verificar acceso SSH a `utility`

En `workstation`, ejecutar:

```bash
ssh student@utility
```

* Aceptar la clave si lo solicita (`yes`)
* Ingresar la contraseña si es necesario

---

### Paso 6: Ejecutar Fase 2 - Endurecimiento remoto

Desde `workstation`, ejecutar:

```bash
bash auditoria_fase2.sh student utility
```

Esto:

* Se conecta a `utility` por SSH
* Ejecuta `02_configurar_firewall.sh`
* Ejecuta `03_ajustar_permisos.sh`

---

### Resultado Esperado

* Log completo de escaneo en `workstation/logs_auditoria/`
* Firewall y permisos endurecidos en `utility`

---

### Notas finales

* Si `ping` o `ssh` fallan, reiniciá las VMs y verificá que ambas estén encendidas.
* También podés ejecutar `02_*.sh` y `03_*.sh` directamente en `utility` desde su consola si preferís.


==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/scripts/01_escanear.sh 

#!/bin/bash
# Establece el intérprete de comandos a usar (bash)

# Configuración de opciones del shell:
# -u: Genera un error al usar variables no definidas
set -u

# Obtener la dirección IP objetivo pasada como primer argumento
TARGET="$1"

# Cargar funciones auxiliares desde el archivo utilidades.sh
# $(dirname "$0") obtiene el directorio donde está este script
# y luego se mueve un nivel arriba (..) para encontrar utilidades.sh
source "$(dirname "$0")/../utilidades.sh"

# Verificar e instalar comandos necesarios si no están presentes
# asegurar_comando es una función definida en utilidades.sh
asegurar_comando nmap       # Herramienta de escaneo de red
asegurar_comando netstat net-tools  # Utilidad para mostrar conexiones de red

echo "=== RUTINA DE SEGURIDAD REMOTA ==="
echo "Objetivo: $TARGET"
echo "Fecha: $(date)"  # Muestra la fecha y hora actual
echo "-----------------------------"

# Escaneo básico de puertos TCP abiertos
# -sT: Escaneo TCP connect()
# -p-: Escanea todos los puertos (1-65535)
echo ""
echo "Escaneo de puertos TCP (nmap -sT)"
sudo nmap -sT -p- "$TARGET"

# Detección de versiones de servicios
# -sV: Detecta versiones de servicios en puertos abiertos
echo ""
echo "Servicios y versiones detectados (nmap -sV)"
sudo nmap -sV "$TARGET"

# Listar servicios configurados para iniciar al arranque
# --type=service: Muestra solo servicios (no sockets, targets, etc.)
# grep enabled: Filtra solo los servicios habilitados
echo ""
echo "Servicios habilitados al arranque (systemctl)"
systemctl list-unit-files --type=service | grep enabled

# Mostrar conexiones de red activas
# -a: Muestra todas las conexiones
# -n: Muestra direcciones numéricas en lugar de resolver nombres
# -t: Muestra solo conexiones TCP
# -p: Muestra el PID y nombre del proceso
# grep ESTABLISHED: Filtra solo conexiones establecidas
echo ""
echo "Conexiones activas (netstat)"
netstat -antp | grep ESTABLISHED

echo ""
echo "Auditoría de red finalizada."

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/scripts/02_configurar_firewall.sh 

#!/bin/bash
set -u

# Verificar privilegios de root
if [ "$(id -u)" -ne 0 ]; then
    echo "❌ Este script debe ejecutarse como root."
    exit 1
fi

# Verificar si firewalld está instalado
if ! command -v firewall-cmd &>/dev/null; then
    echo "❌ firewalld no está instalado."
    exit 1
fi

# Iniciar firewalld si no está activo
if ! systemctl is-active --quiet firewalld; then
    echo "⚙️ Iniciando firewalld..."
    systemctl enable --now firewalld || {
        echo "❌ No se pudo iniciar firewalld."
        exit 1
    }
fi

# Obtener zona activa
ZONA_ACTIVA=$(firewall-cmd --get-active-zones | awk 'NR==1 {print $1}')
ZONA_ACTIVA=${ZONA_ACTIVA:-public}
echo "🌐 Zona activa detectada: $ZONA_ACTIVA"

# Definir listas de servicios
SERVICIOS_OK=("ssh" "http" "https")
SERVICIOS_INSEGUROS=("ftp" "telnet" "samba" "smtp")

echo ""
echo "🧹 Eliminando servicios inseguros..."
for svc in "${SERVICIOS_INSEGUROS[@]}"; do
    if firewall-cmd --permanent --zone="$ZONA_ACTIVA" --query-service="$svc" &>/dev/null; then
        firewall-cmd --permanent --zone="$ZONA_ACTIVA" --remove-service="$svc"
        echo "  🔻 Eliminado: $svc"
    fi
done

echo ""
echo "✅ Asegurando servicios esenciales..."
for svc in "${SERVICIOS_OK[@]}"; do
    if ! firewall-cmd --permanent --zone="$ZONA_ACTIVA" --query-service="$svc" &>/dev/null; then
        firewall-cmd --permanent --zone="$ZONA_ACTIVA" --add-service="$svc"
        echo "  ➕ Permitido: $svc"
    fi
done

# Recargar configuración
echo ""
echo "♻️ Recargando configuración del firewall..."
firewall-cmd --reload

# Mostrar configuración final
echo ""
echo "🎯 Configuración final de servicios permitidos en zona '$ZONA_ACTIVA':"
firewall-cmd --zone="$ZONA_ACTIVA" --list-services

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/scripts/03_ajustar_permisos.sh 

#!/bin/bash
set -u

ARCHIVOS_SENSIBLES=(
    "/etc/shadow:600"
    "/etc/gshadow:600"
    "/etc/passwd:644"
    "/etc/group:644"
    "/root:700:d"
)

echo "Ajustando permisos críticos..."

for item_perm in "${ARCHIVOS_SENSIBLES[@]}"; do
    IFS=':' read -ra permisos <<< "$item_perm"
    item="${permisos[0]}"
    perm_deseado="${permisos[1]}"
    tipo="${permisos[2]:-f}"

    echo "Ajustando $item a $perm_deseado..."
    sudo chmod "$perm_deseado" "$item" || echo "ERROR ajustando $item"

    case "$tipo" in
        d) ls -ld "$item" ;;
        f) ls -l "$item" ;;
        *) echo "ERROR: tipo de archivo desconocido para $item" ;;
    esac
done

==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/07_Sistemas Operativos/TP_RedHat/auditoria-redhat/utilidades.sh 

#!/bin/bash

# Detectar automáticamente el gestor de paquetes
detectar_gestor_paquetes() {
    if command -v dnf &>/dev/null; then
        echo "dnf install -y"
    elif command -v yum &>/dev/null; then
        echo "yum install -y"
    elif command -v apt &>/dev/null; then
        echo "apt install -y"
    elif command -v pacman &>/dev/null; then
        echo "pacman -Sy --noconfirm"
    else
        echo ""
    fi
}

# Verifica si un comando existe, y si no, intenta instalar el paquete
# Uso: asegurar_comando nombre_comando [nombre_paquete]
asegurar_comando() {
    local comando="$1"
    local paquete="${2:-$1}"  # Usa el mismo nombre si no se especifica

    if ! command -v "$comando" &>/dev/null; then
        echo "🔍 $comando no está instalado. Intentando instalar..."
        local instalador=$(detectar_gestor_paquetes)
        if [ -n "$instalador" ]; then
            echo "💡 Ejecutando: sudo $instalador $paquete"
            sudo $instalador "$paquete" || {
                echo "❌ Falló la instalación de $paquete"
                exit 1
            }
        else
            echo "❌ No se pudo detectar un gestor de paquetes válido."
            exit 1
        fi
    else
        echo "✅ $comando ya está instalado."
    fi
}
==================================================
=== FIN DEL REPORTE ===
==================================================
